const WebSocket = require('ws');
const http = require('http');
const { v4: uuidv4 } = require('uuid');

// Configuration du serveur HTTP minimal pour le WebSocket
const server = http.createServer((req, res) => {
Â  res.writeHead(200, { 'Content-Type': 'text/html' });
Â  res.end('<h1>Farm Intelligent Server</h1><p>WebSocket server running on ws://localhost:10000</p>');
});

// Serveur WebSocket sur le port 10000
const wss = new WebSocket.Server({ server });
const PORT = 10000;

// Objets pour gÃ©rer les clients
const clients = {
Â  androids: new Map(), // Map: clientId -> WebSocket
Â  espCams: [],Â  Â  Â  Â  // Tableau des sockets ESP32-CAM
Â  espStandards: []Â  Â  // Tableau des sockets ESP32-Standard
};

// Files d'attente pour les commandes si les ESPs sont dÃ©connectÃ©s
const espCamCommandsQueue = [];
const espStandardCommandsQueue = [];

// File d'attente pour les alertes/images si aucun Android n'est connectÃ©
const pendingAlerts = [];

// --- Fonctions utilitaires ---

/**
 * Envoie un message JSON Ã  un socket spÃ©cifique.
 * @param {WebSocket} socket - Le socket destinataire.
 * @param {string} type - Le type de message.
 * @param {object} [data={}] - Les donnÃ©es JSON.
 * @returns {boolean} - true si envoyÃ©, false sinon.
 */
function sendJsonMessage(socket, type, data = {}) {
Â  if (socket.readyState === WebSocket.OPEN) {
Â  Â  try {
Â  Â  Â  const message = JSON.stringify({ type, ...data });
Â  Â  Â  socket.send(message);
Â  Â  Â  // console.log(`Message envoyÃ© Ã  ${getClientType(socket)} (ID: ${socket.clientId}): ${message.substring(0, 100)}...`);
Â  Â  Â  return true;
Â  Â  } catch (e) {
Â  Â  Â  console.error(`Erreur JSON/envoi pour ${getClientType(socket)} (ID: ${socket.clientId}):`, e.message);
Â  Â  Â  return false;
Â  Â  }
Â  }
Â  console.log(`Ã‰chec envoi message Ã  ${getClientType(socket)} (ID: ${socket.clientId}): socket fermÃ©`);
Â  return false;
}

/**
 * Obtient le type de client (pour logging).
 * @param {WebSocket} socket - Le socket client.
 * @returns {string} - Le type de client.
 */
function getClientType(socket) {
Â  if (socket.clientType === 'android') return 'Android';
Â  if (socket.clientType === 'esp32-cam') return 'ESP-CAM';
Â  if (socket.clientType === 'esp32-standard') return 'ESP-Standard';
Â  return 'Unknown';
}

/**
 * Broadcast une alerte/image Ã  tous les Androids.
 * @param {string} message - Le message de l'alerte.
 * @param {Buffer | null} imageData - Les donnÃ©es binaires de l'image.
 */
function broadcastAlertToAndroids(message, imageData = null) {
Â  if (clients.androids.size > 0) {
Â  Â  clients.androids.forEach((androidSocket) => {
Â  Â  Â  if (androidSocket.readyState === WebSocket.OPEN) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // 1. Envoi de l'image binaire (si prÃ©sente)
Â  Â  Â  Â  Â  if (imageData) {
Â  Â  Â  Â  Â  Â  androidSocket.send(imageData); 
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  // 2. Envoi du message JSON de l'alerte
Â  Â  Â  Â  Â  sendJsonMessage(androidSocket, 'alert', { message });
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error(`Erreur envoi Ã  Android (ID: ${androidSocket.clientId}):`, error.message);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  });
Â  } else {
Â  Â  // Stocker l'alerte pour retry (limite Ã  100 alertes)
Â  Â  if (pendingAlerts.length < 100) {
Â  Â  Â  console.log('Aucun Android connectÃ©. Alerte stockÃ©e:', message);
Â  Â  Â  pendingAlerts.push({ message, imageData, timestamp: Date.now() });
Â  Â  } else {
Â  Â  Â  console.warn('File d\'alertes pleine, alerte ignorÃ©e:', message);
Â  Â  }
Â  }
}

/**
 * Retente l'envoi des alertes/images en attente.
 */
function retryPendingAlerts() {
Â  if (pendingAlerts.length === 0 || clients.androids.size === 0) return;

Â  // Supprimer les alertes trop anciennes (ex: > 1 heure)
Â  const now = Date.now();
Â  const maxAge = 60 * 60 * 1000; // 1 heure
Â  const validAlerts = pendingAlerts.filter(alert => now - alert.timestamp <= maxAge);
Â  pendingAlerts.length = 0; // Vider la file
Â  pendingAlerts.push(...validAlerts); // Restaurer les alertes valides

Â  if (clients.androids.size > 0) {
Â  Â  console.log(`Tentative de renvoi de ${validAlerts.length} alerte(s) en attente.`);
Â  Â  // Utilisation de forEach pour Ã©viter une boucle infinie si broadcast ajoute l'alerte
Â  Â  // Note: Cette boucle est optimisÃ©e pour ne pas re-stocker immÃ©diatement si l'envoi Ã©choue
Â  Â  validAlerts.forEach(({ message, imageData }) => {
Â  Â  Â  broadcastAlertToAndroids(message, imageData);
Â  Â  });
Â  }
}

/**
 * Envoie le statut des ESPs Ã  tous les Androids.
 * @param {('espCam' | 'espStandard')} espType - Le type d'ESP dont le statut a changÃ©.
 * @param {boolean} connected - Le statut (connectÃ© ou dÃ©connectÃ©).
 */
function broadcastEspStatus(espType, connected) {
Â  const status = {
Â  Â  type: 'esp_status',
Â  Â  [espType]: connected,
Â  Â  // Envoyer les deux statuts pour la cohÃ©rence
Â  Â  espCam: clients.espCams.length > 0,
Â  Â  espStandard: clients.espStandards.length > 0
Â  };
Â  clients.androids.forEach((androidSocket) => {
Â  Â  if (androidSocket.readyState === WebSocket.OPEN) {
Â  Â  Â  sendJsonMessage(androidSocket, status.type, status);
Â  Â  }
Â  });
}

/**
 * Distribue une commande d'Android aux ESPs.
 * @param {string} type - Le type de commande.
 * @param {object} params - Les paramÃ¨tres de la commande.
 * @param {WebSocket} androidSocket - Le socket Android d'origine.
 */
function distributeCommand(type, params, androidSocket) {
Â  const command = { type, params };
Â  let sentToCam = false;
Â  let sentToStd = false;

Â  // Envoyer Ã  ESP32-CAM
Â  if (clients.espCams.length > 0) {
Â  Â  clients.espCams.forEach((espSocket) => {
Â  Â  Â  if (sendJsonMessage(espSocket, type, params)) {
Â  Â  Â  Â  sentToCam = true;
Â  Â  Â  }
Â  Â  });
Â  } else {
Â  Â  // N'ajoutez que si elle n'est pas dÃ©jÃ  dans la file pour Ã©viter la duplication excessive
Â  Â  const isQueued = espCamCommandsQueue.some(cmd => cmd.type === type && JSON.stringify(cmd.params) === JSON.stringify(params));
Â  Â  if (!isQueued) {
Â  Â  Â  espCamCommandsQueue.push(command);
Â  Â  }
Â  }

Â  // Envoyer Ã  ESP32-Standard
Â  if (clients.espStandards.length > 0) {
Â  Â  clients.espStandards.forEach((espSocket) => {
Â  Â  Â  if (sendJsonMessage(espSocket, type, params)) {
Â  Â  Â  Â  sentToStd = true;
Â  Â  Â  }
Â  Â  });
Â  } else {
Â  Â  const isQueued = espStandardCommandsQueue.some(cmd => cmd.type === type && JSON.stringify(cmd.params) === JSON.stringify(params));
Â  Â  if (!isQueued) {
Â  Â  Â  espStandardCommandsQueue.push(command);
Â  Â  }
Â  }

Â  // RÃ©ponse Ã  l'Android
Â  const message = `${type} envoyÃ©. CAM: ${sentToCam ? 'OK' : 'Queue'}, STD: ${sentToStd ? 'OK' : 'Queue'}`;
Â  sendJsonMessage(androidSocket, 'command_response', { success: true, message });
}

// --- Gestion des connexions WebSocket ---

wss.on('connection', (socket, req) => {
Â  const clientId = uuidv4();
Â  socket.clientId = clientId;
Â  socket.clientType = null; // Type non dÃ©fini jusqu'Ã  rÃ©ception de 'register'
Â  const clientIp = req.socket.remoteAddress;
Â  console.log(`ðŸ”— Nouveau client connectÃ© depuis ${clientIp} (ID: ${clientId})`);

Â  // DÃ©finir un dÃ©lai pour l'enregistrement (15 secondes)
Â  const registrationTimeout = setTimeout(() => {
Â  Â  if (!socket.clientType && socket.readyState === WebSocket.OPEN) {
Â  Â  Â  console.log(`Client ${clientId} non enregistrÃ© aprÃ¨s 15s, fermeture connexion`);
Â  Â  Â  sendJsonMessage(socket, 'error', { message: 'Enregistrement requis (Timeout)' });
Â  Â  Â  socket.close(1008, 'Non enregistrÃ©');
Â  Â  }
Â  }, 15000);

Â  // Ping pÃ©riodique
Â  const pingInterval = setInterval(() => {
Â  Â  if (socket.readyState === WebSocket.OPEN) {
Â  Â  Â  try {
Â  Â  Â  Â  sendJsonMessage(socket, 'ping');
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  console.error(`Erreur ping pour client ${clientId}:`, e.message);
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  clearInterval(pingInterval);
Â  Â  }
Â  }, 30000);

Â  socket.on('message', (message) => {
Â  Â  // --- GESTION DE L'ENREGISTREMENT ---
Â  Â  if (!socket.clientType) {
Â  Â  Â  if (typeof message === 'string') {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const data = JSON.parse(message);
Â  Â  Â  Â  Â  const type = data.type;
Â  Â  Â  Â  Â  console.log(`Message JSON reÃ§u avant enregistrement (ID: ${clientId}): ${type}`);
Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  if (type === 'register') {
Â  Â  Â  Â  Â  Â  clearTimeout(registrationTimeout); // Annuler le timeout
Â  Â  Â  Â  Â  Â  const device = data.device;
Â  Â  Â  Â  Â  Â  socket.clientType = device;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if (device === 'android') {
Â  Â  Â  Â  Â  Â  Â  clients.androids.set(clientId, socket);
Â  Â  Â  Â  Â  Â  Â  console.log('âœ… Android connectÃ©');
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'registered', { message: 'Enregistrement rÃ©ussi' });
Â  Â  Â  Â  Â  Â  Â  // Envoyer les statuts actuels des ESPs
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'esp_status', {
Â  Â  Â  Â  Â  Â  Â  Â  espCam: clients.espCams.length > 0,
Â  Â  Â  Â  Â  Â  Â  Â  espStandard: clients.espStandards.length > 0
Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  // Retenter l'envoi des alertes en attente
Â  Â  Â  Â  Â  Â  Â  retryPendingAlerts();
Â  Â  Â  Â  Â  Â  } else if (device === 'esp32-cam') {
Â  Â  Â  Â  Â  Â  Â  clients.espCams.push(socket);
Â  Â  Â  Â  Â  Â  Â  console.log('âœ… ESP32-CAM connectÃ©');
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'registered', { message: 'Enregistrement rÃ©ussi' });
Â  Â  Â  Â  Â  Â  Â  broadcastEspStatus('espCam', true);
Â  Â  Â  Â  Â  Â  Â  // Envoyer les commandes en attente
Â  Â  Â  Â  Â  Â  Â  while (espCamCommandsQueue.length > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  const cmd = espCamCommandsQueue.shift();
Â  Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, cmd.type, cmd.params);
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  } else if (device === 'esp32-standard') {
Â  Â  Â  Â  Â  Â  Â  clients.espStandards.push(socket);
Â  Â  Â  Â  Â  Â  Â  console.log('âœ… ESP32-Standard connectÃ©');
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'registered', { message: 'Enregistrement rÃ©ussi' });
Â  Â  Â  Â  Â  Â  Â  broadcastEspStatus('espStandard', true);
Â  Â  Â  Â  Â  Â  Â  // Envoyer les commandes en attente
Â  Â  Â  Â  Â  Â  Â  while (espStandardCommandsQueue.length > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  const cmd = espStandardCommandsQueue.shift();
Â  Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, cmd.type, cmd.params);
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  console.warn(`Type d'appareil inconnu: ${device} (ID: ${clientId})`);
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'error', { message: `Type d'appareil inconnu: ${device}` });
Â  Â  Â  Â  Â  Â  Â  socket.close(1008, 'Type d\'appareil inconnu');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.warn(`Message non-register reÃ§u avant enregistrement (ID: ${clientId}): ${type}. IgnorÃ©.`);
Â  Â  Â  Â  Â  Â  // Ne pas renvoyer d'erreur ici pour laisser le client se corriger ou attendre le timeout
Â  Â  Â  Â  Â  Â  return; 
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error(`Erreur parsing JSON avant enregistrement (ID: ${clientId}):`, error.message);
Â  Â  Â  Â  Â  // Ne pas fermer immÃ©diatement, on attend le timeout
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  } else if (message instanceof Buffer) {
Â  Â  Â  Â  // C'est ici qu'il y a un problÃ¨me si l'ESP envoie l'image d'abord. On ignore et on log.
Â  Â  Â  Â  console.warn(`DonnÃ©es binaires reÃ§ues AVANT enregistrement (ID: ${clientId}), taille: ${message.length} bytes. IgnorÃ©.`);
Â  Â  Â  Â  // Ne pas renvoyer d'erreur ni fermer, on attend le timeout
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  }

Â  Â  // --- GESTION DES MESSAGES POST-ENREGISTREMENT ---
Â  Â  
Â  Â  if (typeof message === 'string') {
Â  Â  Â  // Message JSON
Â  Â  Â  try {
Â  Â  Â  Â  const data = JSON.parse(message);
Â  Â  Â  Â  const type = data.type;
Â  Â  Â  Â  console.log(`Message JSON reÃ§u de ${getClientType(socket)} (ID: ${clientId}): ${type}`);

Â  Â  Â  Â  // Commandes depuis Android
Â  Â  Â  Â  if (socket.clientType === 'android') {
Â  Â  Â  Â  Â  if (type === 'network_config' || type === 'security_config') {
Â  Â  Â  Â  Â  Â  const params = data.params || {};
Â  Â  Â  Â  Â  Â  console.log(`Commande ${type} reÃ§ue de Android (ID: ${clientId}):`, params);
Â  Â  Â  Â  Â  Â  distributeCommand(type, params, socket);
Â  Â  Â  Â  Â  } else if (type === 'pong') {
Â  Â  Â  Â  Â  Â  // OK
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.warn(`Type de commande inconnu de Android: ${type} (ID: ${clientId})`);
Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'error', { message: `Type de commande inconnu: ${type}` });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // Alertes depuis ESPs
Â  Â  Â  Â  if (type === 'alert' && (socket.clientType === 'esp32-cam' || socket.clientType === 'esp32-standard')) {
Â  Â  Â  Â  Â  const msg = data.message || 'Alerte sans message';
Â  Â  Â  Â  Â  console.log(`Alerte reÃ§ue de ${socket.clientType} (ID: ${clientId}): ${msg}`);
Â  Â  Â  Â  Â  // Allumer la lampe sur l'autre ESP (Action de sÃ©curitÃ©)
Â  Â  Â  Â  Â  const otherEsps = socket.clientType === 'esp32-cam' ? clients.espStandards : clients.espCams;
Â  Â  Â  Â  Â  const otherQueue = socket.clientType === 'esp32-cam' ? espStandardCommandsQueue : espCamCommandsQueue;
Â  Â  Â  Â  Â  otherEsps.forEach((otherEsp) => {
Â  Â  Â  Â  Â  Â  if (otherEsp.readyState === WebSocket.OPEN) {
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(otherEsp, 'turn_on_light', { reason: 'alert_detected' });
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  // Ajouter Ã  la queue uniquement si l'autre ESP est dÃ©connectÃ©
Â  Â  Â  Â  Â  Â  Â  otherQueue.push({ type: 'turn_on_light', params: { reason: 'alert_detected' } });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  // Forward Ã  Androids (Sans image ici, l'image est envoyÃ©e sÃ©parÃ©ment)
Â  Â  Â  Â  Â  broadcastAlertToAndroids(msg);
Â  Â  Â  Â  } else if (type === 'pong') {
Â  Â  Â  Â  Â  // OK
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  console.warn(`Message non gÃ©rÃ© de ${socket.clientType} (ID: ${clientId}): ${type}`);
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error(`Erreur parsing JSON pour client ${clientId}:`, error.message);
Â  Â  Â  Â  sendJsonMessage(socket, 'error', { message: 'Message JSON invalide' });
Â  Â  Â  }
Â  Â  } else if (message instanceof Buffer) {
Â  Â  Â  // Image binaire uniquement depuis ESP32-CAM
Â  Â  Â  if (socket.clientType === 'esp32-cam') {
Â  Â  Â  Â  console.log(`Image binaire reÃ§ue de ESP-CAM (ID: ${clientId}), taille: ${message.length} bytes`);
Â  Â  Â  Â  // L'alerte est envoyÃ©e sÃ©parÃ©ment, ici on ne fait que la transmission de l'image
Â  Â  Â  Â  // Le message d'alerte sera le message par dÃ©faut si l'alerte n'est pas dÃ©jÃ  dans la file
Â  Â  Â  Â  broadcastAlertToAndroids('Photo capturÃ©e lors d\'une alerte', message);
Â  Â  Â  } else {
Â  Â  Â  Â  console.error(`Image reÃ§ue d'un client non ESP-CAM (type: ${socket.clientType}, ID: ${clientId})`);
Â  Â  Â  Â  sendJsonMessage(socket, 'error', { message: 'Seuls les ESP32-CAM peuvent envoyer des images' });
Â  Â  Â  }
Â  Â  }
Â  });

Â  socket.on('close', () => {
Â  Â  clearTimeout(registrationTimeout); // S'assurer que le timeout est annulÃ©
Â  Â  clearInterval(pingInterval);
Â  Â  console.log(`${getClientType(socket)} dÃ©connectÃ© (ID: ${clientId})`);
Â  Â  
Â  Â  // Supprimer de la liste
Â  Â  const type = socket.clientType;
Â  Â  clients.androids.delete(clientId);
Â  Â  clients.espCams = clients.espCams.filter(s => s !== socket);
Â  Â  clients.espStandards = clients.espStandards.filter(s => s !== socket);
Â  Â  
Â  Â  // Notifier Androids si ESP dÃ©connectÃ©
Â  Â  if (type === 'esp32-cam') {
Â  Â  Â  broadcastEspStatus('espCam', clients.espCams.length > 0);
Â  Â  } else if (type === 'esp32-standard') {
Â  Â  Â  broadcastEspStatus('espStandard', clients.espStandards.length > 0);
Â  Â  }
Â  });

Â  socket.on('error', (error) => {
Â  Â  console.error(`Erreur WebSocket pour client ${clientId}:`, error.message);
Â  });
});

// Retry pÃ©riodique des alertes en attente
setInterval(retryPendingAlerts, 30000);

// DÃ©marrer le serveur
server.listen(PORT, () => {
Â  console.log(`ðŸš€ Serveur actif sur port ${PORT}. Ã‰coute HTTP et WS.`);
});

// Graceful shutdown
process.on('SIGINT', () => {
Â  console.log('Fermeture du serveur...');
Â  wss.close(() => {
Â  Â  server.close(() => {
Â  Â  Â  process.exit(0);
Â  Â  });
Â  });
});
