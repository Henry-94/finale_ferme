const WebSocket = require('ws');
const http = require('http');
const { v4: uuidv4 } = require('uuid');

// Configuration du serveur HTTP minimal
const server = http.createServer((req, res) => {
Â  res.writeHead(200, { 'Content-Type': 'text/html' });
Â  res.end('<h1>Farm Intelligent Server</h1><p>WebSocket server running</p>');
});

const wss = new WebSocket.Server({ server });
const PORT = 10000;

// --- Objets pour gÃ©rer les clients et files d'attente ---
const clients = {
Â  androids: new Map(),Â  Â  Â  Â  // Map: clientId -> WebSocket
Â  espCams: new Map(),Â  Â  Â  Â  Â // Map: clientId -> WebSocket
Â  espStandards: new Map()Â  Â  // Map: clientId -> WebSocket
};

const espCamCommandsQueue = [];
const espStandardCommandsQueue = [];
const pendingAlerts = []; // Stocke { message, imageData } si aucun Android

// --- Fonctions utilitaires ---

/**
 * Envoie un message JSON Ã  un socket spÃ©cifique.
 */
function sendJsonMessage(socket, type, data = {}) {
Â  if (socket.readyState === WebSocket.OPEN) {
Â  Â  try {
Â  Â  Â  const message = JSON.stringify({ type, ...data });
Â  Â  Â  socket.send(message);
Â  Â  Â  return true;
Â  Â  } catch (e) {
Â  Â  Â  console.error(`Erreur JSON/envoi Ã  ${socket.clientId}:`, e.message);
Â  Â  Â  return false;
Â  Â  }
Â  }
Â  return false;
}

/**
 * Obtient le statut actuel des ESPs.
 */
function getEspStatus() {
Â  return {
Â  Â  espCam: clients.espCams.size > 0,
Â  Â  espStandard: clients.espStandards.size > 0
Â  };
}

/**
 * Broadcast le statut des ESPs Ã  tous les Androids.
 */
function broadcastEspStatus() {
Â  const status = getEspStatus();
Â  const androidStatusMessage = {
Â  Â  type: 'esp_status',
Â  Â  connected: status.espCam // Votre Android n'Ã©coute que "connected"
Â  Â  // NOTE: Votre AndroidManager n'Ã©coute que 'connected' dans "esp_status".
Â  Â  // Si vous voulez les deux, modifiez l'Android pour lire 'espCam' et 'espStandard'
Â  Â  // du JSON 'esp_status', que je peux aussi fournir.
Â  Â  // Pour l'instant, je fais correspondre Ã  votre Android Manager actuel:
Â  };
Â  
Â  clients.androids.forEach((androidSocket) => {
Â  Â  sendJsonMessage(androidSocket, androidStatusMessage.type, androidStatusMessage);
Â  });
}

/**
 * Broadcast une alerte/image Ã  tous les Androids, stocke si dÃ©connectÃ©.
 */
function broadcastAlertToAndroids(message, imageData = null) {
Â  const androidsConnected = clients.androids.size > 0;
Â  
Â  // 1. Tenter l'envoi
Â  if (androidsConnected) {
Â  Â  clients.androids.forEach((androidSocket) => {
Â  Â  Â  if (androidSocket.readyState === WebSocket.OPEN) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // 1.1. Envoi de l'image binaire (si prÃ©sente)
Â  Â  Â  Â  Â  if (imageData) {
Â  Â  Â  Â  Â  Â  androidSocket.send(imageData); 
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  // 1.2. Envoi du message JSON de l'alerte
Â  Â  Â  Â  Â  sendJsonMessage(androidSocket, 'alert', { message });
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error(`Erreur envoi alerte/image Ã  Android:`, error.message);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  });
Â  }
Â  
Â  // 2. Stocker si personne n'est connectÃ©
Â  if (!androidsConnected) {
Â  Â  if (pendingAlerts.length < 50) { // Limite de 50 alertes en attente
Â  Â  Â  console.log('Aucun Android connectÃ©. Alerte stockÃ©e:', message);
Â  Â  Â  pendingAlerts.push({ message, imageData, timestamp: Date.now() });
Â  Â  } else {
Â  Â  Â  console.warn('File d\'alertes pleine, alerte ignorÃ©e:', message);
Â  Â  }
Â  }
}

/**
 * Retente l'envoi des alertes/images en attente Ã  tous les Androids connectÃ©s.
 */
function retryPendingAlerts() {
Â  if (pendingAlerts.length === 0 || clients.androids.size === 0) return;

Â  const alertsToSend = pendingAlerts.splice(0, pendingAlerts.length);
Â  console.log(`Tentative de renvoi de ${alertsToSend.length} alerte(s) en attente.`);

Â  alertsToSend.forEach(alert => {
Â  Â  // Utiliser la fonction de broadcast qui gÃ¨re la rÃ©insertion si l'envoi Ã©choue
Â  Â  // Cependant, comme clients.androids.size > 0 ici, l'envoi devrait rÃ©ussir
Â  Â  // si la socket est ouverte.
Â  Â  broadcastAlertToAndroids(alert.message, alert.imageData);
Â  });
}

/**
 * Envoie une commande Android Ã  tous les ESPs.
 */
function distributeCommand(type, params, androidSocket) {
Â  const command = { type, params };
Â  let sentToCam = false;
Â  let sentToStd = false;

Â  // 1. Envoyer Ã  ESP32-CAM
Â  clients.espCams.forEach((espSocket) => {
Â  Â  if (sendJsonMessage(espSocket, type, params)) {
Â  Â  Â  sentToCam = true;
Â  Â  }
Â  });

Â  // Ajouter Ã  la queue si aucun CAM n'est connectÃ©
Â  if (!sentToCam) {
Â  Â  espCamCommandsQueue.push(command);
Â  }

Â  // 2. Envoyer Ã  ESP32-Standard
Â  clients.espStandards.forEach((espSocket) => {
Â  Â  if (sendJsonMessage(espSocket, type, params)) {
Â  Â  Â  sentToStd = true;
Â  Â  }
Â  });

Â  // Ajouter Ã  la queue si aucun Standard n'est connectÃ©
Â  if (!sentToStd) {
Â  Â  espStandardCommandsQueue.push(command);
Â  }

Â  // 3. RÃ©ponse Ã  l'Android (compatible avec onCommandResponse)
Â  const message = `${type} envoyÃ©. CAM: ${sentToCam ? 'OK' : 'Queue'}, STD: ${sentToStd ? 'OK' : 'Queue'}`;
Â  sendJsonMessage(androidSocket, 'command_response', { success: true, message });
}

/**
 * Envoie une commande aux ESPs en file d'attente lors de la connexion.
 */
function sendQueuedCommands(socket, isCam) {
Â  const queue = isCam ? espCamCommandsQueue : espStandardCommandsQueue;
Â  console.log(`Envoi de ${queue.length} commande(s) en attente au nouveau ${isCam ? 'ESP-CAM' : 'ESP-Standard'}.`);
Â  while (queue.length > 0) {
Â  Â  const cmd = queue.shift();
Â  Â  sendJsonMessage(socket, cmd.type, cmd.params);
Â  }
}

// --- Gestion des connexions WebSocket ---

wss.on('connection', (socket, req) => {
Â  const clientId = uuidv4();
Â  socket.clientId = clientId;
Â  socket.clientType = null;
Â  const clientIp = req.socket.remoteAddress;
Â  console.log(`ðŸ”— Nouveau client connectÃ© depuis ${clientIp} (ID: ${clientId})`);

Â  // Timeout pour forcer l'enregistrement
Â  const registrationTimeout = setTimeout(() => {
Â  Â  if (!socket.clientType && socket.readyState === WebSocket.OPEN) {
Â  Â  Â  console.log(`Client ${clientId} non enregistrÃ© aprÃ¨s 15s, fermeture.`);
Â  Â  Â  sendJsonMessage(socket, 'error', { message: 'Enregistrement requis (Timeout)' });
Â  Â  Â  socket.close(1008, 'Non enregistrÃ©');
Â  Â  }
Â  }, 15000);

Â  socket.on('message', (message) => {
Â  Â  // --- 1. GESTION DE L'ENREGISTREMENT ---
Â  Â  if (!socket.clientType) {
Â  Â  Â  if (typeof message === 'string') {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const data = JSON.parse(message);
Â  Â  Â  Â  Â  if (data.type === 'register') {
Â  Â  Â  Â  Â  Â  clearTimeout(registrationTimeout);
Â  Â  Â  Â  Â  Â  const device = data.device;
Â  Â  Â  Â  Â  Â  socket.clientType = device;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  console.log(`âœ… Client ID ${clientId} enregistrÃ© comme: ${device}`);

Â  Â  Â  Â  Â  Â  if (device === 'android') {
Â  Â  Â  Â  Â  Â  Â  clients.androids.set(clientId, socket);
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'registered', { message: 'OK' });
Â  Â  Â  Â  Â  Â  Â  broadcastEspStatus(); // Envoyer statut ESPs Ã  Android
Â  Â  Â  Â  Â  Â  Â  retryPendingAlerts(); // Envoyer alertes en attente
Â  Â  Â  Â  Â  Â  } else if (device === 'esp32-cam') {
Â  Â  Â  Â  Â  Â  Â  clients.espCams.set(clientId, socket);
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'registered', { message: 'OK' });
Â  Â  Â  Â  Â  Â  Â  sendQueuedCommands(socket, true); // Envoyer commandes en attente
Â  Â  Â  Â  Â  Â  Â  broadcastEspStatus();
Â  Â  Â  Â  Â  Â  } else if (device === 'esp32-standard') {
Â  Â  Â  Â  Â  Â  Â  clients.espStandards.set(clientId, socket);
Â  Â  Â  Â  Â  Â  Â  sendJsonMessage(socket, 'registered', { message: 'OK' });
Â  Â  Â  Â  Â  Â  Â  sendQueuedCommands(socket, false); // Envoyer commandes en attente
Â  Â  Â  Â  Â  Â  Â  broadcastEspStatus();
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  socket.close(1008, 'Type d\'appareil inconnu');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.warn(`Message non-register reÃ§u avant enregistrement (ID: ${clientId}). IgnorÃ©.`);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error(`Erreur parsing JSON avant enregistrement (ID: ${clientId}):`, error.message);
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  } else if (message instanceof Buffer) {
Â  Â  Â  Â  console.warn(`DonnÃ©es binaires reÃ§ues AVANT enregistrement (ID: ${clientId}). IgnorÃ©.`);
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  }

Â  Â  // --- 2. GESTION DES MESSAGES POST-ENREGISTREMENT ---

Â  Â  // Alerte avec image depuis ESP-CAM
Â  Â  if (message instanceof Buffer) {
Â  Â  Â  if (socket.clientType === 'esp32-cam') {
Â  Â  Â  Â  // L'image est transmise seule, l'alerte doit suivre juste aprÃ¨s.
Â  Â  Â  Â  // On utilise une alerte par dÃ©faut en attendant l'alerte JSON
Â  Â  Â  Â  console.log(`Image reÃ§ue de ESP-CAM (ID: ${clientId}), taille: ${message.length} bytes`);
Â  Â  Â  Â  broadcastAlertToAndroids('Photo d\'alerte reÃ§ue', message);
Â  Â  Â  } else {
Â  Â  Â  Â  console.error(`DonnÃ©es binaires reÃ§ues d'un client non-CAM: ${socket.clientType}`);
Â  Â  Â  }
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  // Messages JSON
Â  Â  if (typeof message === 'string') {
Â  Â  Â  try {
Â  Â  Â  Â  const data = JSON.parse(message);
Â  Â  Â  Â  const type = data.type;
Â  Â  Â  Â  console.log(`Message JSON reÃ§u de ${socket.clientType} (ID: ${clientId}): ${type}`);

Â  Â  Â  Â  // Commandes depuis Android (network_config, security_config)
Â  Â  Â  Â  if (socket.clientType === 'android') {
Â  Â  Â  Â  Â  if (type === 'network_config' || type === 'security_config') {
Â  Â  Â  Â  Â  Â  distributeCommand(type, data.params || {}, socket);
Â  Â  Â  Â  Â  } else if (type === 'pong') {
Â  Â  Â  Â  Â  Â  // RÃ©ponse au ping du serveur
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.warn(`Type de commande Android inconnu: ${type}`);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // Alertes depuis ESPs
Â  Â  Â  Â  if (type === 'alert' && (socket.clientType === 'esp32-cam' || socket.clientType === 'esp32-standard')) {
Â  Â  Â  Â  Â  const msg = data.message || 'Alerte sans message';
Â  Â  Â  Â  Â  console.log(`Alerte reÃ§ue de ${socket.clientType}: ${msg}`);
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // 1. Transfert Ã  Android (seulement le message ici, l'image est binaire)
Â  Â  Â  Â  Â  broadcastAlertToAndroids(msg);
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // 2. Action de sÃ©curitÃ©: Allumer la lampe sur l'autre ESP
Â  Â  Â  Â  Â  const isCamAlert = socket.clientType === 'esp32-cam';
Â  Â  Â  Â  Â  const targetEsps = isCamAlert ? clients.espStandards : clients.espCams;
Â  Â  Â  Â  Â  const targetQueue = isCamAlert ? espStandardCommandsQueue : espCamCommandsQueue;

Â  Â  Â  Â  Â  let sentLightCommand = false;
Â  Â  Â  Â  Â  targetEsps.forEach(otherEsp => {
Â  Â  Â  Â  Â  Â  if (sendJsonMessage(otherEsp, 'turn_on_light', { reason: 'alert_detected' })) {
Â  Â  Â  Â  Â  Â  Â  sentLightCommand = true;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  if (!sentLightCommand) {
Â  Â  Â  Â  Â  Â  targetQueue.push({ type: 'turn_on_light', params: { reason: 'alert_detected' } });
Â  Â  Â  Â  Â  Â  console.log(`Commande 'turn_on_light' mise en file d'attente pour l'autre ESP.`);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Ping/Pong ESP
Â  Â  Â  Â  if (type === 'pong') { 
Â  Â  Â  Â  Â  // RÃ©ponse au ping du serveur (si les ESPs le gÃ¨rent)
Â  Â  Â  Â  Â  return; 
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error(`Erreur parsing JSON pour client ${clientId}:`, error.message);
Â  Â  Â  Â  sendJsonMessage(socket, 'error', { message: 'Message JSON invalide' });
Â  Â  Â  }
Â  Â  }
Â  });

Â  socket.on('close', () => {
Â  Â  clearTimeout(registrationTimeout); 
Â  Â  
Â  Â  const type = socket.clientType;
Â  Â  
Â  Â  // Suppression du client
Â  Â  if (type === 'android') {
Â  Â  Â  clients.androids.delete(clientId);
Â  Â  } else if (type === 'esp32-cam') {
Â  Â  Â  clients.espCams.delete(clientId);
Â  Â  Â  broadcastEspStatus();
Â  Â  } else if (type === 'esp32-standard') {
Â  Â  Â  clients.espStandards.delete(clientId);
Â  Â  Â  broadcastEspStatus();
Â  Â  }
Â  Â  
Â  Â  console.log(`ðŸ’” ${type || 'Unknown'} dÃ©connectÃ© (ID: ${clientId})`);
Â  });

Â  socket.on('error', (error) => {
Â  Â  console.error(`Erreur WebSocket pour client ${clientId}:`, error.message);
Â  });
});

// Retry pÃ©riodique des alertes en attente (toutes les 30 secondes)
setInterval(retryPendingAlerts, 30000);

// DÃ©marrer le serveur
server.listen(PORT, () => {
Â  console.log(`ðŸš€ Serveur actif sur port ${PORT}. Ã‰coute HTTP et WS.`);
});

// Gestion du Ping/Pong pour les clients Android et ESPs
const pingInterval = setInterval(() => {
Â  const activeClients = [...clients.androids.values(), ...clients.espCams.values(), ...clients.espStandards.values()];
Â  activeClients.forEach(socket => {
Â  Â  if (socket.readyState === WebSocket.OPEN) {
Â  Â  Â  sendJsonMessage(socket, 'ping');
Â  Â  }
Â  });
}, 30000); // Envoi d'un ping toutes les 30 secondes
